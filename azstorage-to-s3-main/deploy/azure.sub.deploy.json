{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group to create the resources in. Leave empty to use naming convention {project}-{environment}-rg."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westeurope"
    },
    "project": {
      "type": "string",
      "defaultValue": "blob2s3"
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev"
    },
    "scheduledContainerName": {
      "type": "string",
      "defaultValue": "scheduled"
    },
    "archiveContainerName": {
      "type": "string",
      "defaultValue": "archive"
    },
    "liveContainerName": {
      "type": "string",
      "defaultValue": "live"
    },
    "awsBucket": {
      "type": "string",
      "metadata": {
        "description": "AWS S3 bucket name"
      }
    },
    "awsAccessKey": {
      "type": "secureString",
      "metadata": {
        "description": "AWS AccessKey"
      }
    },
    "awsSecretKey": {
      "type": "secureString",
      "metadata": {
        "description": "AWS SecretKey"
      }
    }
  },
  "functions": [],
  "variables": {
    "rgName": "[if(empty(parameters('resourceGroupName')), format('{0}-{1}-rg', parameters('project'), parameters('environment')), parameters('resourceGroupName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-06-01",
      "name": "[variables('rgName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "appDeployment",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgName')), '2020-06-01', 'full').location]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "project": {
            "value": "[parameters('project')]"
          },
          "archiveContainerName": {
            "value": "[parameters('archiveContainerName')]"
          },
          "liveContainerName": {
            "value": "[parameters('liveContainerName')]"
          },
          "scheduledContainerName": {
            "value": "[parameters('scheduledContainerName')]"
          },
          "awsAccessKey": {
            "value": "[parameters('awsAccessKey')]"
          },
          "awsBucket": {
            "value": "[parameters('awsBucket')]"
          },
          "awsSecretKey": {
            "value": "[parameters('awsSecretKey')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "project": {
              "type": "string",
              "defaultValue": "blob2s3"
            },
            "environment": {
              "type": "string",
              "defaultValue": "dev"
            },
            "scheduledContainerName": {
              "type": "string",
              "defaultValue": "scheduled",
              "metadata": {
                "description": "Container name to periodically transfer"
              }
            },
            "archiveContainerName": {
              "type": "string",
              "defaultValue": "archive",
              "metadata": {
                "description": "Container to move the files from the scheduled run"
              }
            },
            "liveContainerName": {
              "type": "string",
              "defaultValue": "live",
              "metadata": {
                "description": "Container name to monitor for file additions"
              }
            },
            "functionAppRepoUrl": {
              "type": "string",
              "defaultValue": "https://github.com/nianton/azstorage-to-s3",
              "metadata": {
                "description": "The function application repository to be deployed -change if forked"
              }
            },
            "functionAppRepoBranch": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "The function application repository branch to be deployed"
              }
            },
            "keyVaultSku": {
              "type": "string",
              "defaultValue": "standard",
              "metadata": {
                "description": "Azure Key Vault SKU"
              },
              "allowedValues": [
                "standard",
                "premium"
              ]
            },
            "azureFunctionPlanSkuName": {
              "type": "string",
              "defaultValue": "Y1",
              "metadata": {
                "description": "Azure Function plan, Y1: Consumption, EPx: Elastic Premium"
              },
              "allowedValues": [
                "Y1",
                "EP1",
                "EP2",
                "EP3"
              ]
            },
            "awsBucket": {
              "type": "string",
              "metadata": {
                "description": "AWS S3 bucket name"
              }
            },
            "awsAccessKey": {
              "type": "secureString",
              "metadata": {
                "description": "AWS AccessKey - value will be stored in the Key Vault"
              }
            },
            "awsSecretKey": {
              "type": "secureString",
              "metadata": {
                "description": "AWS SecretKey - value will be stored in the Key Vault"
              }
            }
          },
          "functions": [],
          "variables": {
            "resourcePrefix": "[format('{0}-{1}', parameters('project'), parameters('environment'))]",
            "resourceNames": {
              "funcApp": "[format('{0}-func', variables('resourcePrefix'))]",
              "keyVault": "[format('{0}-kv', variables('resourcePrefix'))]",
              "dataStorage": "[format('s{0}data', toLower(replace(variables('resourcePrefix'), '-', '')))]"
            },
            "secretNames": {
              "awsAccessKey": "awsAccessKey",
              "awsSecretKey": "awsSecretKey",
              "dataStorageConnectionString": "[format('{0}ConnectionString', variables('resourceNames').dataStorage)]"
            },
            "defaultTags": {
              "environment": "[parameters('environment')]",
              "project": "[parameters('project')]"
            },
            "containerNames": [
              "[parameters('archiveContainerName')]",
              "[parameters('liveContainerName')]",
              "[parameters('scheduledContainerName')]"
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "containers",
                "count": "[length(variables('containerNames'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/default/{1}', variables('resourceNames').dataStorage, variables('containerNames')[copyIndex()])]",
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dataStorage')]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[variables('resourceNames').keyVault]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('keyVaultSku')]"
                },
                "accessPolicies": [
                  {
                    "tenantId": "[reference(resourceId('Microsoft.Resources/deployments', 'funcApp'), '2019-10-01').outputs.identity.value.tenantId]",
                    "objectId": "[reference(resourceId('Microsoft.Resources/deployments', 'funcApp'), '2019-10-01').outputs.identity.value.principalId]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ]
              },
              "tags": "[variables('defaultTags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'funcApp')]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2018-02-14",
              "name": "[format('{0}/{1}', variables('resourceNames').keyVault, variables('secretNames').dataStorageConnectionString)]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataStorage'), '2019-10-01').outputs.connectionString.value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dataStorage')]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('resourceNames').keyVault)]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2018-02-14",
              "name": "[format('{0}/{1}', variables('resourceNames').keyVault, variables('secretNames').awsAccessKey)]",
              "properties": {
                "value": "[parameters('awsAccessKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('resourceNames').keyVault)]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2018-02-14",
              "name": "[format('{0}/{1}', variables('resourceNames').keyVault, variables('secretNames').awsSecretKey)]",
              "properties": {
                "value": "[parameters('awsSecretKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('resourceNames').keyVault)]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "dataStorage",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').dataStorage]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('defaultTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2"
                    },
                    "sku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "Standard_LRS",
                        "tier": "Standard"
                      }
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2019-06-01",
                      "name": "[toLower(replace(parameters('name'), '-', ''))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": "[parameters('sku')]",
                      "tags": "[union(parameters('tags'), createObject('displayName', parameters('name')))]",
                      "properties": {
                        "accessTier": "Hot",
                        "supportsHttpsTrafficOnly": true
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[toLower(replace(parameters('name'), '-', ''))]"
                    },
                    "primaryKey": {
                      "type": "string",
                      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', ''))), '2019-06-01').keys[0].value]"
                    },
                    "connectionString": {
                      "type": "string",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', ''))), '2019-06-01').keys[0].value)]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "funcApp",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('resourceNames').funcApp]"
                  },
                  "managedIdentity": {
                    "value": true
                  },
                  "tags": {
                    "value": "[variables('defaultTags')]"
                  },
                  "skuName": {
                    "value": "[parameters('azureFunctionPlanSkuName')]"
                  },
                  "funcDeployBranch": {
                    "value": "[parameters('functionAppRepoBranch')]"
                  },
                  "funcDeployRepoUrl": {
                    "value": "[parameters('functionAppRepoUrl')]"
                  },
                  "funcAppSettings": {
                    "value": [
                      {
                        "name": "DataStorageConnection",
                        "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('resourceNames').keyVault, variables('secretNames').dataStorageConnectionString)]"
                      },
                      {
                        "name": "AwsAccessKey",
                        "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('resourceNames').keyVault, variables('secretNames').awsAccessKey)]"
                      },
                      {
                        "name": "AwsSecretKey",
                        "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('resourceNames').keyVault, variables('secretNames').awsSecretKey)]"
                      },
                      {
                        "name": "AwsBucketName",
                        "value": "[parameters('awsBucket')]"
                      },
                      {
                        "name": "LiveContainer",
                        "value": "[parameters('liveContainerName')]"
                      },
                      {
                        "name": "ScheduledContainer",
                        "value": "[parameters('scheduledContainerName')]"
                      },
                      {
                        "name": "ArchiveContainer",
                        "value": "[parameters('archiveContainerName')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "funcWorkerRuntime": {
                      "type": "string",
                      "defaultValue": "dotnet"
                    },
                    "funcExtensionVersion": {
                      "type": "string",
                      "defaultValue": "~3"
                    },
                    "funcAppSettings": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "managedIdentity": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Y1",
                      "allowedValues": [
                        "Y1",
                        "EP1",
                        "EP2",
                        "EP3"
                      ]
                    },
                    "funcDeployRepoUrl": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "funcDeployBranch": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "subnetIdForIntegration": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "includeSampleFunction": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "functions": [],
                  "variables": {
                    "skuTier": "[if(equals(parameters('skuName'), 'Y1'), 'Dynamic', 'Elastic')]",
                    "funcAppServicePlanName": "[format('{0}-asp', parameters('name'))]",
                    "funcStorageName": "[format('s{0}', replace(parameters('name'), '-', ''))]",
                    "funcAppInsName": "[format('{0}-appins', parameters('name'))]",
                    "createSourceControl": "[not(empty(parameters('funcDeployRepoUrl')))]",
                    "createNetworkConfig": "[not(empty(parameters('subnetIdForIntegration')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('funcAppServicePlanName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[variables('skuTier')]"
                      }
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "functionapp",
                      "identity": {
                        "type": "[if(parameters('managedIdentity'), 'SystemAssigned', 'None')]"
                      },
                      "properties": {
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('funcAppServicePlanName'))]",
                        "siteConfig": {
                          "appSettings": "[concat(createArray(createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', parameters('funcExtensionVersion')), createObject('name', 'WEBSITE_NODE_DEFAULT_VERSION', 'value', '10.14.1'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', parameters('funcWorkerRuntime')), createObject('name', 'AzureWebJobsDashboard', 'value', reference(resourceId('Microsoft.Resources/deployments', variables('funcStorageName')), '2019-10-01').outputs.connectionString.value), createObject('name', 'AzureWebJobsStorage', 'value', reference(resourceId('Microsoft.Resources/deployments', variables('funcStorageName')), '2019-10-01').outputs.connectionString.value), createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', reference(resourceId('Microsoft.Resources/deployments', variables('funcStorageName')), '2019-10-01').outputs.connectionString.value), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(parameters('name'))), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', reference(resourceId('Microsoft.Resources/deployments', variables('funcAppInsName')), '2019-10-01').outputs.instrumentationKey.value), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('funcAppInsName')), '2019-10-01').outputs.instrumentationKey.value))), parameters('funcAppSettings'))]"
                        },
                        "httpsOnly": true,
                        "clientAffinityEnabled": false
                      },
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', variables('funcAppInsName'))]",
                        "[resourceId('Microsoft.Web/serverfarms', variables('funcAppServicePlanName'))]",
                        "[resourceId('Microsoft.Resources/deployments', variables('funcStorageName'))]"
                      ]
                    },
                    {
                      "condition": "[variables('createNetworkConfig')]",
                      "type": "Microsoft.Web/sites/networkConfig",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/VirtualNetwork', parameters('name'))]",
                      "properties": {
                        "subnetResourceId": "[parameters('subnetIdForIntegration')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[variables('createSourceControl')]",
                      "type": "Microsoft.Web/sites/sourcecontrols",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/web', parameters('name'))]",
                      "properties": {
                        "branch": "[parameters('funcDeployBranch')]",
                        "repoUrl": "[parameters('funcDeployRepoUrl')]",
                        "isManualIntegration": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('includeSampleFunction')]",
                      "type": "Microsoft.Web/sites/functions",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/sampleFunction', parameters('name'))]",
                      "properties": {
                        "config": {
                          "bindings": [
                            {
                              "name": "req",
                              "authLevel": "anonymous",
                              "type": "httpTrigger",
                              "direction": "in",
                              "methods": [
                                "get",
                                "post"
                              ]
                            },
                            {
                              "name": "$return",
                              "type": "http",
                              "direction": "out"
                            }
                          ],
                          "files": {
                            "run.csx": "#r \"Newtonsoft.Json\"\n\nusing System.Net;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\nusing Newtonsoft.Json;\n\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\n{\n    log.LogInformation(\"C# HTTP trigger function processed a request.\");\n\n    string name = req.Query[\"name\"];\n\n    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n    dynamic data = JsonConvert.DeserializeObject(requestBody);\n    name = name ?? data?.name;\n\n    string responseMessage = string.IsNullOrEmpty(name)\n        ? \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\n                : $\"Hello, {name}. This HTTP triggered function executed successfully.\";\n\n            return new OkObjectResult(responseMessage);\n}\n"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[variables('funcStorageName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('funcStorageName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "StorageV2"
                            },
                            "sku": {
                              "type": "object",
                              "defaultValue": {
                                "name": "Standard_LRS",
                                "tier": "Standard"
                              }
                            }
                          },
                          "functions": [],
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2019-06-01",
                              "name": "[toLower(replace(parameters('name'), '-', ''))]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "sku": "[parameters('sku')]",
                              "tags": "[union(parameters('tags'), createObject('displayName', parameters('name')))]",
                              "properties": {
                                "accessTier": "Hot",
                                "supportsHttpsTrafficOnly": true
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[toLower(replace(parameters('name'), '-', ''))]"
                            },
                            "primaryKey": {
                              "type": "string",
                              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', ''))), '2019-06-01').keys[0].value]"
                            },
                            "connectionString": {
                              "type": "string",
                              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', ''))), '2019-06-01').keys[0].value)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2019-10-01",
                      "name": "[variables('funcAppInsName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('funcAppInsName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "project": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "nianton"
                            },
                            "project": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "functions": [],
                          "variables": {
                            "workspaceName": "[format('{0}-lawp', parameters('name'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2020-08-01",
                              "location": "[parameters('location')]",
                              "name": "[variables('workspaceName')]",
                              "tags": "[union(parameters('tags'), createObject('displayName', variables('workspaceName'), 'projectName', parameters('project')))]",
                              "properties": {
                                "retentionInDays": 90,
                                "sku": {
                                  "name": "PerGB2018"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "web",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "Application_Type": "web",
                                "Request_Source": "rest",
                                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                            },
                            "instrumentationKey": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name'))).InstrumentationKey]"
                            },
                            "workspaceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/serverfarms', variables('funcAppServicePlanName'))]"
                    },
                    "identity": {
                      "type": "object",
                      "value": {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-06-01', 'full').identity.tenantId]",
                        "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-06-01', 'full').identity.principalId]",
                        "type": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2020-06-01', 'full').identity.type]"
                      }
                    },
                    "applicationInsights": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('funcAppInsName')), '2019-10-01').outputs]"
                    },
                    "storage": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('funcStorageName')), '2019-10-01').outputs]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "funcDeployment": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'funcApp'), '2019-10-01').outputs]"
            },
            "dataStorage": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataStorage'), '2019-10-01').outputs]"
            },
            "keyVault": {
              "type": "object",
              "value": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', variables('resourceNames').keyVault)]",
                "name": "[variables('resourceNames').keyVault]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('rgName'))]"
      ]
    }
  ],
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.1.62928",
      "templateHash": "7510700378708722771"
    }
  }
}